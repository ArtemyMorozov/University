
#include<iostream>
#include <cstring>
#include <algorithm>
using namespace std;

class Array {
public:
    int* masArray;
    int size1;
    char operator[](int i) {
        return masArray[i];
    }
    void create(int b) {
        size1 = b;
        masArray = new int[size1];
    }

    void Fill_Array() {
        for (int i = 0; i < size1; i++)
            cin >> masArray[i];
    }

    void DisplayArr(int num) {
        cout << "Array" << num << ' ';
        for (int i = 0; i < size1; i++)
            cout << dec << masArray[i] << " ";
    }

    void change() {
        int index;
        cin >> index;
        int b;
        cin >> b;
        masArray[index] = b;
    }
    void sum(int* a, int* b) {
        cout << "Array1+Array2 ";
        for (int i = 0; i < size1; i++) {
            cout << a[i] + b[i] << " ";
        }
        cout << endl;
    }
};
class Decimal :public Array {
public:
    char mas[10];
    int size;
    Decimal(int b) {
        size = b;
    }
    void Fill() {
        for (int i = size - 1; i >= 0; i--)
            cin >> mas[i];
    }
    void Display(int num) {
        cout << "Decimal" << num << ' ';
        for (int i = 0; i < size; i++)
            cout << dec << mas[i];
        cout << " ";
    }
    void Operation_Decimal(char* str1, char* str2) {
        long long a = atof(str1);
        long long b = atof(str2);
        char first[100];
        char second[100];
        char itog[100];
        strcpy_s(first, str1);
        strcpy_s(second, str2);
        first[size] = '\0';
        second[size] = '\0';
        func(first, second, itog);
        int len = strlen(itog);
        cout << endl;
        cout << "Decimal1+Decimal2" << " " << a + b << endl;
        cout << "Decimal1-Decimal2" << " " << a - b << endl;
        cout << "Decimal1*Decimal2" << " " << itog << endl;
        cout << "Decimal1/Decimal2" << " " << (int)(a / b) << endl;
    }
    void reverse(char* dl, char* to) {
        int len = strlen(dl);
        int l;
        for (l = 0; l < len; l++) to[l] = dl[len - l - 1];
        to[len] = '\0';
    }
    void func(char* first, char* second, char* itog) {
        char F[1000], S[1000], temp[1000];
        int f_len, s_len, f, s, r, t_len, hold, res;
        f_len = strlen(first);
        s_len = strlen(second);
        reverse(first, F);
        reverse(second, S);
        t_len = f_len + s_len;
        r = -1;
        for (f = 0; f <= t_len; f++)temp[f] = '0';
        temp[f] = '\0';
        for (s = 0; s < s_len; s++) {
            hold = 0;
            for (f = 0; f < f_len; f++) {
                res = (F[f] - '0') * (S[s] - '0') + hold + (temp[f + s] - '0');
                temp[f + s] = res % 10 + '0';
                hold = res / 10;
                if (f + s > r) r = f + s;
            }
            while (hold != 0) {
                res = hold + temp[f + s] - '0';
                hold = res / 10;
                temp[f + s] = res % 10 + '0';
                if (r < f + s) r = f + s;
                f++;
            }
        }
        for (; r > 0 && temp[r] == '0'; r--);
        temp[r + 1] = '\0';
        reverse(temp, itog);
    }
};

class Hex : public Array
{
public:
    char* mass_char;
    int* mass_int;
    int len3;
    long long int itog;

    Hex() {}
    Hex(bool value, int this_len)
    {
        itog = 0;

        if (value)
        {
            long long exp = 1;

            if (this_len == 20)
                cin >> len3;
            else
                len3 = this_len;

            mass_char = new char[len3];
            mass_int = new int[len3];

            for (int i = 0; i < len3; i++)
            {
                cin >> mass_char[i];
                mass_int[i] = char_to_int(mass_char[i]);

                itog += exp * mass_int[i];
                exp *= 16;
            }
        }
        else
        {
            mass_char = new char[this_len];
            mass_int = new int[this_len];

            len3 = this_len;
            for (int i = 0; i < this_len + 1; i++)
            {
                mass_int[i] = 0;
                mass_char[i] = '0';
            }
        }
    }

    void print(Hex x)
    {
        long long int temp;

        cout << "Hex1 ";
        for (int i = len3 - 1; i > -1; i--)
            cout << mass_char[i];
        cout << " Hex2 ";
        for (int i = x.len3 - 1; i > -1; i--)
            cout << x.mass_char[i];
        cout << endl;

        temp = itog + x.itog;
        cout << "Hex1+Hex2  ";
        cout << hex << temp << endl;

        cout << "Hex1-Hex2  ";
        temp = itog - x.itog;
        if (temp < 0)
            cout << "-";
        cout << abs(temp) << endl;

        temp = itog * x.itog;
        cout << "Hex1*Hex2  ";
        cout << temp << endl;

        temp = itog / x.itog;
        cout << "Hex1/Hex2 ";
        cout << temp << dec;
        cout << endl;
    }

    int char_to_int(char t) {
        switch (t)
        {
            case '0': return 0;
            case '1': return 1;
            case '2': return 2;
            case '3': return 3;
            case '4': return 4;
            case '5': return 5;
            case '6': return 6;
            case '7': return 7;
            case '8': return 8;
            case '9': return 9;
            case 'A': return 10;
            case 'B': return 11;
            case 'C': return 12;
            case 'D': return 13;
            case 'E': return 14;
            case 'F': return 15;
        }
        return 0;
    }
};


int main() {
    int size_Array;
    int size_Decimal;
    cin >> size_Array;
    Array a1;
    Array a2;
    a1.create(size_Array);
    a1.Fill_Array();
    a1.DisplayArr(1);
    a2.create(size_Array);
    a2.Fill_Array();
    a2.DisplayArr(2);
    cout << endl;
    a1.sum(a1.masArray, a2.masArray);
    Hex hexFirst(1, 20);
    Hex hexSecond(1, hexFirst.len3);
    hexFirst.print(hexSecond);
    cin >> size_Decimal;
    Decimal d1(size_Decimal);
    Decimal d2(size_Decimal);
    d1.Fill();
    d2.Fill();
    d1.Display(1);
    d2.Display(2);
    d1.Operation_Decimal(d1.mas, d2.mas);
    int k;
    long long exp;
    while (true) {
        cin >> k;
        switch (k)
        {
            case 1:
                a1.change();
                a1.DisplayArr(1);
                a2.DisplayArr(2);
                cout << endl;
                a1.sum(a1.masArray, a2.masArray);
                break;
            case 2:
                a2.change();
                a1.DisplayArr(1);
                a2.DisplayArr(2);
                cout << endl;
                a1.sum(a1.masArray, a2.masArray);
                break;
            case 3:
            {
                hexFirst.itog = 0;
                exp = 1;

                for (int i = 0; i < hexFirst.len3; i++)
                {
                    cin >> hexFirst.mass_char[i];
                    hexFirst.mass_int[i] = hexFirst.char_to_int(hexFirst.mass_char[i]);
                }

                for (int i = 0; i < hexFirst.len3; i++)
                {
                    hexFirst.itog += exp * hexFirst.mass_int[i];
                    exp *= 16;
                }

                hexFirst.print(hexSecond);

                continue;
            }
            case 4:
            {
                hexSecond.itog = 0;
                exp = 1;
                for (int i = 0; i < hexSecond.len3; i++)
                {
                    cin >> hexSecond.mass_char[i];
                    hexSecond.mass_int[i] = hexSecond.char_to_int(hexSecond.mass_char[i]);
                }
                for (int i = 0; i < hexSecond.len3; i++)
                {
                    hexSecond.itog += exp * hexSecond.mass_int[i];
                    exp *= 16;
                }
                hexFirst.print(hexSecond);
                continue;
            }
            case 5:
                d1.Fill();
                d1.Display(1);
                d2.Display(2);
                d1.Operation_Decimal(d1.mas, d2.mas);
                break;
            case 6:
                d2.Fill();
                d1.Display(1);
                d2.Display(2);
                d1.Operation_Decimal(d1.mas, d2.mas);
                break;
            case 0:
                return 0;
        }
    }
    return 0;
}
